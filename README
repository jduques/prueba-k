-------------------
PRUEBA TECNICA PHP
-------------------

El proyecto se realizó en Laravel 10.

Para iniciar debemos clonar el proyecto usando el comando:

---------------------------------------------------------------------------
git clone https://github.com/jduques/prueba-k.git
---------------------------------------------------------------------------

Si usamos Git para el control de versiones, por defecto, el archivo .gitignore no tomará
en cuenta la carpeta “vendor” de Laravel, y tampoco el archivo .env (el cual es muy importante).
Por ello, al clonar nuestro proyecto, debemos hacer unos ajustes necesarios.

Una vez clonado, abrimos una terminal y nos situaremos en ~/prueba-k/.

Luego creamos los directorios de "storage", (manejo de archivos en aplicaciones web)
y le cambiamos los permismos para que los pueda manipular el navegador e instalamos con composer

---------------------------------------------------------------------------
mkdir -p storage/{framework/{sessions,views,cache,testing},app,logs}
sudo chown -R www-data:www-data storage/
composer install
---------------------------------------------------------------------------

Automáticamente composer leerá el archivo composer.json y comenzará a instalar todas las dependencias.

Una vez que termine podemos seguir con el siguiente paso, crear el archivo ".env".

Por razones de seguridad, el archivo .env no es subido junto al resto de los archivos del proyecto,
ya que cada uno tiene contraseñas privadas, así que tenemos que generar uno por nosotros mismos.
Podemos hacerlo desde el terminal y sobre nuestra carpeta "prueba-k" escribiremos:

cp env.example .env

Lo editamos con nuestras contraseñas, usuarios, rutas, etcétera.
Por lo regular sólo se editan las credenciales de las bases de datos, usuario y clave:

DB_CONNECTION=mysql     ---> base de datos con la que el proyecto trabaja
DB_HOST=127.0.0.1       ---> IP donde se ejecuta mysql, si es en un container Docker, usar su IP, Container ID o Container Name
DB_PORT=3306            ---> puerto de la base de datos
DB_DATABASE=prueba-k    ---> nombre de nuestra base de datos
DB_USERNAME=docker      ---> usuario principal del proyecto en mysql
DB_PASSWORD=docker      ---> clave de usuario

Cuando terminemos, sólo guardaremos el fichero para proceder con el paso final.

Generar una clave.
-----------------

Laravel necesita una clave única para nuestros proyectos. La generaremos usando el comando:

-----------------------------
php artisan key:generate
-----------------------------

Esperaremos un momento y se habrá creado nuestra clave en el archivo ".env", similar a:

APP_KEY=base64:8oqYHtAfu/JykUBidF6VtNeBjaO8u6vhn92/Mw1eWYs=

Listo; con esto deberíamos poder ejecutar nuestra app sin problemas.

=================================================================================================

USANDO DOCKER
-------------

Luego de instala Docker, Se debe clonar el proyecto Docker, en el directorio de su preferencia, ejemplo: /home/user/

------------------------------------------------------------------
git clone https://github.com/sprintcube/docker-compose-lamp.git
------------------------------------------------------------------

Este es un entorno LAMP Stack básico creado con Docker Compose. Consiste en lo siguiente

-----------------------------------------
PHP, Apache, MySQL, phpMyAdmin, Redis
-----------------------------------------

Luego de clonar "docker-compose-lamp", se creará el directorio ~/docker-compose-lamp con todos los 
archivos y directorios necesarios; entre ellos los archivos:

docker-compose.yml  (se deja igual sin modificar, a no ser que se quieran cambiar algunos valores)
sample.env ( se cambia "PHPVERSION=php8" a "PHPVERSION=php81" y se crea una copia)

------------------------
cp sample.env a .env
------------------------

Estos archivos tienen la configuración de cada app necesaria para ejecutar nuestro
proyecto: mysql, apache, phpmyadmin, php.

luego de generar la copia del archivo .env se debe ejecutar el siguiente comado para crear y levantar
los contenedores:

----------------------------
docker-compose up -d
----------------------------

Luego se debe ingresar al directorio ~/docker-compose-lamp/www/

y clonar el proyecto "prueba-k" y seguir las instrucciones iniciles. 

Para ejecuar el proyecto "docker-compose-lamp", se debe abrir un navegador y escribir:

localhost (este se ejecuta en el puerto por defecto: 80)

Si todo marcha bien, veremos una página del ambiente de desarrollo LAMP STACK.

Para entrar a nuestro proyecto escribiremos:

---------------------------------
localhost/prueba-k/public
---------------------------------

Algunos comandos útiles en Docker
---------------------------------

visualizar los contenedores:

------------
docker ps 
------------

de aquí tomamos el CONTAINER ID que nos interesa y consultamos su IP:

-------------------------------------------------------------------------------------------
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 59dd0b81fc64
-------------------------------------------------------------------------------------------
